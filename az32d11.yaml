substitutions:
  name: az32d11
  friendly_name: az32d11
  loglevel: DEBUG

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
 level: $loglevel

# Enable Home Assistant API
api:
  encryption:
    key: "ItbIWzcS56YSbi3bzNAcXSTtFpRDeLxjgRD4we1jHrg="
  reboot_timeout: 0s
  services:
    - service: write_text
      variables:
        message: string
      then:
        - globals.set:
            id: matrix_text
            value: !lambda 'return message;'

        - delay: 20s
        - globals.set:
            id: matrix_text
            value: !lambda 'return "";'

ota:
  password: "235a7a83f30c47e4663bdb685bbe055c"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Az32D11 Fallback Hotspot"
    password: "IFT8Wf2XS0yt"

captive_portal:

web_server:
  port: 80

sensor:
  - platform: wifi_signal
    name: ${friendly_name} WiFi Signal
    update_interval: 4s     #60s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 1

  - platform: uptime
    name: ${friendly_name} Uptime Sensor 

  - platform: dht
    pin: GPIO25
    model: DHT11
    temperature:
      id: temp1
      name: ${friendly_name} Temperature Sensor25 # "D11 Temperature Sensor25 innen"
    humidity:
      id: humi1
      name: ${friendly_name} Humidity Sensor25 # "D11 Humidity Sensor25 innen"
    update_interval: 60s #30s     60s eco

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Address
    ssid:
      name: ${friendly_name} Connected SSID

  - platform: homeassistant
    name: "Matrix Text"
    id: matrix_text1
    entity_id: input_text.matrix_text  # !!!helper2
    
  - platform: homeassistant
    name: "Brightness 7219"
    id: matrixbri
    entity_id: input_number.matrixbri   # !!!helper1

switch:
  - platform: restart
    name: ${friendly_name} Restart # "D11 Restart"

  - platform: shutdown
    name: ${friendly_name} Shutdown  # "D11 Shutdown"

binary_sensor:
  - platform: status
    name: ${friendly_name} Status  # "D11 Status"

time:
  - platform: sntp
    id: esphome_time
    servers:
      - 0.pool.ntp.org

#----------------------------
#   Globale Variablen
#----------------------------
globals:
  - id: matrix_text
    type: std::string
    restore_value: no
    initial_value: ''
  - id: anim_pos
    type: int
    restore_value: no
    initial_value: '0'

  - id: display_page   ##Test2
    type: int
    restore_value: no
    initial_value: '1'

#----------------------------
#   LED Matrix (MAX7219)
#----------------------------
font:
  - file: "pixelmix.ttf"
    id: digit_font
    size: 8

spi:
  clk_pin: GPIO18 #D5 SCK
  mosi_pin: GPIO23 #D7 Mosi

display:
  - platform: max7219digit
    rotate_chip: 0 # 180 #dirty fix from esphome 2.2
    reverse_enable: false
    flip_x: false #dirty fix end 
    id: matrix_display  # max7219d
    cs_pin: GPIO19 #D6 Miso
    num_chips: 4
    intensity: 10   #start Brightness 7219 vorher 10   0-15  !!!helper1
    scroll_enable: true
    scroll_mode: CONTINUOUS
    scroll_speed: 120ms # 200ms
    scroll_delay: 3s
    scroll_dwell: 22s
    update_interval: 10s  #5s
    # lambda orginal "%d.%m"  to %H:%M   int atoi (const char * str);  = Convert string to integer
    lambda: |-
     if(strlen(id(matrix_text).c_str()) > 0){
        it.printf(0, 0, id(digit_font), "%s - - - ", id(matrix_text).c_str());
      } else {
          it.intensity(atoi(id(matrixbri).state.c_str()));
          if (id(display_page) == 1) {
            it.strftime(0, 0, id(digit_font), "%d.%m", id(esphome_time).now()); 
            }  else {
              if (id(display_page) == 2) {
              it.strftime(0, 0, id(digit_font), "%H:%M", id(esphome_time).now()); 
              } else {
                if (id(display_page) == 3) {
                it.printf(0, 0, id(digit_font), "%.1fÂ°C", id(temp1).state); 
                } else {
                   if (id(display_page) == 4) {
                   it.printf(0, 0, id(digit_font), "%.1f%%", id(humi1).state);
                   } else {
                   if (id(display_page) == 5) { 
                     it.printf(0, 0, id(digit_font), "%s + + + ", id(matrix_text1).state.c_str()); 
                     id(display_page) = 0;
                     }
                   
                   } } } };}
          id(display_page) ++;


    
